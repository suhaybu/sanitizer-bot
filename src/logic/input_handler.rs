// Todo

use std::sync::LazyLock;

use regex::{Regex, RegexSet, RegexSetBuilder};

const INSTAGRAM_PATTERN: &str =
    r"(?i)https?://(?:www\.)?instagram\.com/(?P<type>reel|p)(?P<data>/[^/\s?]+)";

const TIKTOK_PATTERN: &str = r"(?i)https?://(?:\w{1,3}\.)?tiktok\.com/[^/]+/?\S*";

const TWITTER_PATTERN: &str =
    r"(?i)https?://(www\.)?(twitter|x)\.com/(?P<username>\w+)(?P<data>/status/[^?\s]*)";

static PATTERNS: LazyLock<RegexSet> = LazyLock::new(|| {
    RegexSetBuilder::new([TIKTOK_PATTERN, INSTAGRAM_PATTERN, TWITTER_PATTERN])
        .case_insensitive(true)
        .multi_line(true)
        .build()
        .unwrap_or_else(|err| {
            eprintln!("Failed to build RegexSet PATTERNS: {err}");
            panic!("RegexSet initialization failed")
        })
});

#[derive(Debug, PartialEq)]
enum URLMatchType {
    Tiktok {
        url: String,
    },
    Instagram {
        url: String,
        post_type: String,
        data: String,
    },
    Twitter {
        url: String,
        username: String,
        data: String,
    },
}

fn get_match(input: &str) -> Option<URLMatchType> {
    let matches = PATTERNS.matches(input);

    let matched_index = match matches.iter().next() {
        Some(index) => index,
        None => return None,
    };

    match matched_index {
        0 => {
            let re = Regex::new(TIKTOK_PATTERN).unwrap();
            return re.captures(input).map(|captures| URLMatchType::Tiktok {
                url: captures.get(0).unwrap().as_str().to_string(),
            });
        }
        _ => None,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_tiktok_url() {
        let matches = get_match("https://vt.tiktok.com/ZSYXeWygm/");
        assert_eq!(
            matches,
            Some(URLMatchType::Tiktok {
                url: ("https://vt.tiktok.com/ZSYXeWygm/".to_string())
            })
        );
    }

    // The test codes below this line are all generated by ChatGPT

    #[test]
    fn test_instagram_post_url() {
        let matches = get_match("https://instagram.com/p/CMeJMFBs66n/");
        assert_eq!(
            matches,
            Some(URLMatchType::Instagram {
                url: "https://instagram.com/p/CMeJMFBs66n/".to_string(),
                post_type: "p".to_string(),
                data: "/CMeJMFBs66n".to_string(),
            })
        );
    }

    #[test]
    fn test_instagram_reel_url() {
        let matches = get_match("https://www.instagram.com/reel/C6lmbgLLflh/");
        assert_eq!(
            matches,
            Some(URLMatchType::Instagram {
                url: "https://www.instagram.com/reel/C6lmbgLLflh/".to_string(),
                post_type: "reel".to_string(),
                data: "/C6lmbgLLflh".to_string(),
            })
        );
    }

    #[test]
    fn test_twitter_url() {
        let matches = get_match("https://x.com/loltyler1/status/179560257244486sf33");
        assert_eq!(
            matches,
            Some(URLMatchType::Twitter {
                url: "https://x.com/loltyler1/status/179560257244486sf33".to_string(),
                username: "loltyler1".to_string(),
                data: "/status/179560257244486sf33".to_string(),
            })
        );
    }

    #[test]
    fn test_twitter_with_www_url() {
        let matches = get_match("http://www.twitter.com/rit_chill/status/1756388311445221859");
        assert_eq!(
            matches,
            Some(URLMatchType::Twitter {
                url: "http://www.twitter.com/rit_chill/status/1756388311445221859".to_string(),
                username: "rit_chill".to_string(),
                data: "/status/1756388311445221859".to_string(),
            })
        );
    }
}
